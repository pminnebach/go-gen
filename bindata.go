// Code generated by go-bindata.
// sources:
// templates/_LICENSE_APACHE
// templates/_LICENSE_MIT
// templates/_Makefile
// templates/_README.md
// templates/_gitignore
// templates/_main.go
// templates/hello/_hello.go
// templates/hello/_hello_test.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates_license_apache = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5f\x73\xdc\x46\x72\x7f\xd7\xa7\xe8\x6c\x55\x2a\x64\x15\xb4\xd2\x39\x77\x49\xce\x7e\xa2\x45\xea\xbc\x89\xbc\x54\x91\xab\x28\x7e\x9c\x05\x1a\x8b\x89\x06\x33\xf0\xcc\x80\x4b\xc4\xe5\xef\x9e\xea\x9e\x3f\x18\xec\x2e\x65\xa5\xf2\x76\x7e\x70\x89\x24\xd0\xd3\xd3\x7f\x7e\xfd\xeb\x6e\xc0\x1f\xfd\x77\x33\x88\xba\x43\xf8\x20\x6b\xd4\x0e\x5f\x7d\xe5\xc9\xff\x44\xeb\xa4\xd1\xf0\xdd\xfa\x6d\x05\xff\x2e\xf4\x28\xec\x04\xdf\xbd\x7d\xfb\xe7\x17\x5f\xea\xbc\x1f\xbe\x7f\xf3\xe6\x78\x3c\xae\x05\x1f\xb3\x36\xf6\xf0\x46\x85\xa3\xdc\x9b\x57\xf4\xe2\xee\xee\xe1\xe7\x47\xb8\xd9\xde\xc2\xbb\xfb\xed\xed\x66\xb7\xb9\xdf\x3e\xc2\xfb\xfb\x07\xf8\xf4\x78\x57\xc1\xc3\xdd\xc7\x87\xfb\xdb\x4f\xef\xe8\xd7\x15\x3f\x75\xbb\x79\xdc\x3d\x6c\x7e\xfc\x44\xbf\x61\x01\x7f\x5a\xc3\x2d\xb6\x52\x4b\x2f\x8d\x76\xeb\x57\x51\x9b\x55\xbc\xd1\x0a\x5c\x27\x94\x82\x1e\x85\x06\xdf\x21\x78\xb4\xbd\x03\xa1\x1b\xa8\x8d\x6e\xc2\x5b\xd0\x1a\x0b\xa3\xc3\x0a\x2c\x0e\xd6\x34\x63\x4d\xbf\xae\xa2\x28\x7a\xb6\x91\xce\x5b\xb9\x1f\xe9\xf7\x20\x1c\x34\x74\x24\x36\xb0\x9f\xe0\x11\xeb\x20\xe4\x4f\xe0\x3b\x6b\xc6\x43\x07\x7f\x05\xd3\x82\xef\xa4\x83\xc6\xd4\x63\x8f\xda\x9f\xea\x65\xec\x99\x62\xb5\x19\x26\x2b\x0f\x9d\x07\x73\xd4\x68\xc1\x58\x40\xed\xa5\x9f\x40\x8c\xbe\x33\x56\xfe\x0f\x9f\x17\xe5\x5c\x7a\xc3\x77\xc2\x83\x74\x70\xb0\x42\x7b\xa9\x0f\xfc\x50\xb4\x43\xa1\x00\x1e\x84\x82\x3b\x16\x7d\xa6\xc4\xa8\xe9\x82\xac\x3d\x82\xa8\x59\x4a\xd2\x42\x37\x20\x94\x8a\x62\x8c\xef\x30\x2a\x28\xd1\x85\xa3\x6b\xa3\xbd\x35\xaa\x02\x61\x31\xfd\xa0\x58\xe9\x8a\x6e\x43\xbf\x1d\x75\x83\x16\x6a\xd3\xf7\x46\x47\x49\xf1\x41\x38\x4a\xdf\x05\x39\xe1\xc0\x35\xbc\x37\x96\xf5\x18\x46\x3b\x18\x87\x6e\xb6\x6a\x76\x78\xf2\xd1\x2a\x4a\x59\xf1\x55\x1c\x5c\xc9\xeb\xf0\xaa\x39\xa2\xad\xa0\x91\x16\x6b\x4f\x4a\x48\x1d\xfe\x5d\x81\x37\x50\x8b\xd1\x21\x3d\x17\xa5\x84\x3f\xb1\x05\x2c\xf4\x42\x8b\x03\x92\xf3\xe8\x5c\x37\xd6\x5d\x54\xac\x82\x63\x87\x7c\xfd\xfd\x14\xb4\x17\x2c\xbb\xb4\xcc\x51\x52\x34\x19\x0b\x57\x52\x5e\x07\xf7\xb8\x4e\x0e\x24\xa9\x95\xad\x9f\x60\x40\x5b\x93\xe8\xab\xbf\xbc\xfd\xc7\x6b\x3e\xce\x58\x8c\x86\x4f\x82\x46\xef\xbc\xd0\x0d\xf9\xc0\x75\xc2\xa2\x4b\x12\xe5\x35\xec\x51\x63\x2b\x6b\x29\xd4\x52\x7a\xa1\xe7\xec\xf2\x5f\xcc\xb8\x82\x2b\x63\xf9\x5f\x76\x75\x5d\x7a\x5d\x68\xb6\xc9\x93\x6c\x46\x92\x65\xa1\x8c\x8f\x28\x00\x9f\xd1\xd6\xd2\x91\x22\x03\xda\x5e\x3a\xc7\x01\xcf\x71\x16\x92\x80\xdd\x72\x16\x6a\x8f\x66\xb4\x35\xae\x28\xbd\xfa\xd3\x48\x1b\x2c\xb6\x68\x2d\x36\xe1\xaf\x2d\x5b\xfc\x0b\x1d\xd1\x9b\x46\xb6\xb2\x16\x9c\x55\xc9\xc1\x52\xd7\x6a\x64\x53\xec\x47\x0f\xda\x78\x50\xb2\x97\x74\xba\x37\xe0\x4c\xeb\x8f\x14\x5e\x8e\x0f\x84\xda\x34\x58\xe5\xdc\x63\x41\x51\x4c\x78\xa0\x4a\xf9\xdf\xca\xc3\x68\xf9\xef\xd0\x4a\x85\x05\x7c\xdc\xef\xff\x1b\x6b\x7f\xae\xba\xd0\x53\xf8\x9d\x45\x37\x2a\xce\x8f\xd6\x9a\x1e\x7a\xac\x3b\xa1\x65\x2d\x52\x82\x78\x2b\xb4\xa3\x27\x45\x0a\x28\xfe\x8d\x8a\x3f\xb6\x20\x20\x98\x87\xc5\x55\xcb\x0b\x46\x19\x27\xd7\xac\x4d\x3f\x48\x4a\x28\xc3\xca\xc5\x6b\x1e\x50\xa3\x15\xf4\xc8\xe2\xc2\x25\x7a\xd5\x46\x3f\x05\xf4\x76\x24\x27\xe4\x6e\x8f\x8d\x14\xe0\xa7\xa1\xbc\xf6\x67\x63\xbf\x9c\x81\xc2\xd1\xd8\x2f\xac\x31\xe3\x10\x45\xda\x9c\x02\x52\xa7\x6b\xe4\x04\x08\xa6\x8b\xd7\xea\x45\x83\x20\x9e\x84\x54\x62\xaf\x52\xfe\x17\xb8\x54\x11\x9a\x52\x00\xd6\x22\x86\x92\xc8\xb8\x90\xd0\x4d\x1b\x2f\x6b\xcc\xf0\x16\x2c\x85\x0d\x9d\x4d\xb0\xe2\x3d\xd5\x16\xb6\x50\xd2\x36\x8a\xb8\x12\x1a\xf0\x59\xf4\x83\x42\x7a\x71\xb0\xe6\x49\xc6\x17\xe9\xc9\x9b\x61\x40\xdd\xc8\x67\xd8\xa3\x32\xc7\xeb\xd9\x0a\xb7\x68\xe5\x93\xf0\xf2\x09\x81\x0c\xe2\x56\xa7\x11\x40\x67\x5c\xb6\x41\xbc\x7d\x94\x14\x6c\x90\x14\xdf\x0b\x47\xce\xd3\x9c\x8a\x0d\x9d\x41\xd1\x6f\x4d\x1f\xb0\x8a\x8e\x62\x77\x51\x2e\x1c\x3b\x59\x77\x05\x18\x60\x23\xbd\xb1\x94\xee\x16\x9f\x24\xbb\x92\xa2\x58\x1b\x1f\xf3\x04\x50\x89\xbd\xb1\xe9\x27\x63\x93\x9b\xcb\x6c\x8a\xc2\xa8\xca\xa1\x43\xed\xd9\xfa\x02\x8e\x9d\x51\x9c\x14\x60\xac\x3c\x48\x2d\xd4\x05\x9f\x9f\xe3\x71\xc2\xa9\x76\x91\xfe\x15\x9c\x9a\x2f\x5a\x8f\xa2\x39\xfa\x8e\xc5\xc7\xaa\x61\xb1\x17\x32\xe7\x27\x0e\xc2\x72\xa4\x90\x5d\xf8\x1a\x3d\x5a\x54\x13\x28\xa9\xbf\xb0\xe1\xf6\x52\x73\x9c\x68\xd1\xe3\x75\x72\xba\xd4\x1e\x6d\x2b\x6a\x2e\x12\x55\x51\x23\xb3\x51\xcf\x94\x22\xeb\xa0\x69\x67\xaf\xbf\x23\x28\x8f\x35\xfe\xa2\xc7\x4f\x73\x20\xa7\x6c\x71\x5e\x36\x60\x4c\xb8\x54\x4b\xb3\x1e\x24\x6c\xe1\x13\x8e\xe1\x26\x32\x91\x24\xc9\x04\xdb\xf0\x5b\xc6\xbe\xa8\x7c\x55\x24\x85\x27\xd4\x37\x5a\x28\x95\x60\xdb\x8d\xfb\x5e\xfa\x08\x1e\x89\x77\x70\x74\xb1\xe6\xac\x5e\x4c\x05\x3e\x88\x71\xfc\x8c\x56\x24\x2f\x73\xb9\xfb\x6a\xb5\x28\x89\x0a\xa1\x32\x1f\x4f\xf1\xbe\xc7\x4e\xa8\x16\x4c\xfb\x32\x79\xf9\xb6\x6a\x0f\xab\x7c\xa7\x55\x94\x15\xea\x7d\x86\x65\xd3\x02\x2a\xac\xbd\x35\x5a\xd6\x15\x79\x61\x2f\x14\xc7\xd1\xd1\xd2\x7b\x9a\xc9\xc7\xa8\xa3\xf5\x81\xb2\xa0\x34\x3a\xce\x86\x22\x3b\x79\x37\x27\x0b\xdb\xdf\x55\x5f\x2d\x45\x19\xbb\xca\x33\x8c\x2e\x74\x82\x5e\x48\x45\x2f\x2b\xe9\xbc\xab\xca\x92\x95\xa9\x90\x9b\x9c\xc7\xde\x95\x10\x2e\x9d\x1b\x91\x4a\x48\xcd\x35\x32\x3e\x11\xdc\x4f\x95\x2f\xb0\x95\xcc\xb5\x4a\xa3\x57\x05\x8c\x2c\xa2\xa0\xb0\x36\xd9\xad\x91\xae\x1e\x1d\x57\x79\x3e\xb1\x67\xbc\x8c\x34\xf2\x33\x23\xde\x5c\x9a\xf0\x39\x19\x61\x79\xd7\x14\x8f\xb5\xd1\x6e\x90\xf5\x68\x46\xa7\x26\xe8\x85\xfd\x42\xd0\x67\x67\x76\x94\x28\x17\x3a\x79\xd0\x8c\xfd\x52\xb3\x8f\xd8\xb0\x17\x23\x91\xc0\x6a\xb5\x35\x1e\x04\x94\xb9\xba\x5e\x9d\xa7\xf0\x09\xbf\xce\xd7\x4e\x19\xf8\x87\x94\xa7\x34\x20\xe1\x63\x7f\x72\x28\x74\xc2\xc1\x1e\x51\x83\xc5\x1a\x19\xc9\xf7\xd3\xe2\x9c\x39\x09\x1d\xfe\x3a\xa2\xf6\x8a\x8e\xad\x8d\x1d\x4c\x28\xd7\x44\x78\x8b\xf4\x0b\x40\xf4\xdd\x1a\xfe\x46\xb4\x8a\x8e\x7d\x97\xaf\x9f\x98\x15\x3c\x8e\xa1\xb8\xc6\x58\xbd\xd8\xcc\x14\x69\x56\xa2\x32\x8a\xba\x83\xc2\x40\x40\x10\xb2\x9f\x02\x8b\x63\x5e\xf0\x8b\x19\x41\x10\xc3\x1b\xd0\x8f\x42\xa5\xf0\x3b\x1a\xab\x9a\xa3\x24\xae\xa1\x8d\x7e\xcd\x9e\x77\xf2\x89\x7f\x7c\x5d\x77\xc2\x1e\xa8\x71\x32\x93\x50\x7e\x7a\xdd\x5a\xc4\x0a\xa4\xb5\xf8\x64\x6a\x02\xf2\xb3\x6a\x1e\xfb\x3f\x3a\x30\x75\x5b\x58\x11\x1d\x1c\x28\x8e\xcf\x90\x6e\x86\xf3\x61\xdc\x2b\x59\xab\x89\x02\x75\x50\x62\xaa\xe6\xdf\x0c\x68\x43\xa9\x75\xfc\x9b\x48\x2c\xca\xbe\xad\xa4\xf9\x19\x8b\x99\x2c\x9f\x9d\x78\xa1\x9c\x33\xb6\x04\x07\xfd\x73\xe1\xa0\x8f\x82\x40\xf7\xef\xc0\x3b\x57\xf8\x5c\xe3\xe0\x29\xc1\x9c\x4f\xc9\xc8\x0a\xba\xd0\x10\x5d\xc3\x10\xee\x5a\x78\xaf\x17\x5f\xb0\x82\x4e\x3c\x21\xb3\xbc\xa4\x10\xf7\xd1\xa6\x6d\x89\xe7\x19\x70\xa8\x54\x15\xff\x2f\xfb\xc1\x58\x1f\x1c\x93\x71\x20\x12\xe5\xc8\x0a\x19\x66\xd2\xcd\xc8\x04\xc1\x47\xe9\x54\x31\x0c\x8a\xda\x4d\xa3\xd5\x14\xac\x4c\xd8\x15\x55\xab\x95\x90\xbd\x8b\xcf\x16\x97\xdb\x4f\x41\x48\x69\xdd\x8c\x9b\x1a\x6b\x74\x4e\x58\xc9\xd9\xd9\x5a\xa9\x0f\xa9\xa3\x41\x99\x6a\x5f\x99\xf8\x57\xee\x1a\x84\x32\x1a\x63\x45\xac\x4d\xbf\x97\x3a\xb3\x7a\x7e\xed\xf4\x85\x74\xa1\xd0\xe1\xc6\x6a\xeb\x4d\x24\x79\x4b\xe5\xe2\x11\x47\x72\x45\xaa\x75\x6b\xd8\xb4\xe4\xff\xdc\x0b\x39\x2f\x3d\xc5\x74\x76\x8a\x97\x87\xa0\x82\x38\x08\xfa\x33\x83\x5c\x6c\xdc\xaf\xe6\x82\x95\xb9\xb5\x35\xce\xbd\x66\x83\xd1\x35\x6a\x33\x12\x7f\x0a\x3f\x4b\x0d\x02\x94\x38\xba\x51\x7a\xba\xaa\xc2\x43\x28\x02\xc2\x67\xe5\x67\x4e\x70\x82\x8a\x5f\x03\x38\xae\x09\x41\x71\x17\x5b\xed\x59\x4e\x3d\x3b\x67\x4a\xd7\x4a\xfe\xe8\x99\xa9\xfa\x0e\x03\x15\x5b\x46\x62\xa2\x4c\xa9\x19\x8d\x99\x92\x1a\x8d\x39\xc7\x62\xc9\x4b\xac\x2a\x54\x07\x4a\x51\xf2\x5e\x8a\x15\xe1\x12\x61\x6b\x84\xcf\xc1\x97\xad\x2b\x1d\xf7\x89\x4d\x80\x82\x3f\xaf\xe1\x01\xcb\xc9\xd0\x9a\x8f\xee\xc5\x34\x23\xdb\x29\x0a\xd5\x66\x90\x89\xdb\x2c\xf0\xe8\x2b\x2c\x8f\x5d\x42\xb4\x11\x1b\x39\xf6\x55\x88\x23\x62\x34\xd2\x77\x26\x57\xe4\x65\xdb\x1c\x4a\xf8\x0b\x48\x56\xcd\xad\x10\x1b\x64\x0e\xad\x1e\x31\x78\xb9\x35\x4a\x99\x63\xa8\xef\x09\xbb\xbe\x7f\x95\xfb\xaa\xeb\x70\xd3\xd1\x79\x38\x90\xbe\xa4\x5e\xe8\x37\x2c\xd6\x72\x90\x48\xa0\x55\x52\xdf\xdc\x1d\xd2\x7f\x67\x17\x15\x5c\x1f\x4e\x3b\x89\x1f\xb8\x8c\xa6\x33\xf7\xc5\x99\x61\x70\x33\x53\x69\xea\xa3\xa8\x7f\x0f\x43\x1d\x4b\x21\x64\x4d\x2f\x35\xc5\x49\xe8\x1e\x5d\x71\x3c\x41\x5c\x0e\x69\x92\x49\xad\xfb\x81\x8d\x81\x41\xce\xf2\xe4\xba\x38\xd9\xa2\x17\x52\x57\x89\x37\x17\x2d\x3c\x77\x07\x7a\x3a\xbb\x5c\x71\x70\x3e\x70\x0e\x88\x8a\x32\x6c\xae\x8e\x55\x8c\xee\x8a\x60\xb1\x41\xe2\x4d\x55\x41\x26\x38\x44\xfd\x9c\x6e\xf1\x6e\x61\x04\x71\x41\x9f\x53\x48\x5d\x32\xb7\x80\x9e\x49\x06\x2b\xd7\x18\x26\xb4\x03\x5a\xba\x26\x99\x33\x64\x9c\xf5\x73\xe1\x82\xc8\xe0\x4f\x2f\xba\x34\x5a\x73\x4d\xa0\x95\xfd\x1f\x1b\x3f\x72\xf5\x6a\x7b\xbf\xdb\xbc\xbb\x5b\x81\xc7\x67\xcf\xf6\xa6\xb4\x8b\x67\x10\xe5\x2e\xce\x29\xb3\xab\x80\x80\x0b\x99\x72\x66\x59\xf6\x57\x21\x2a\xb5\x9e\x02\x2c\x8a\x86\x7b\xcc\x39\xe8\xf0\xa2\x59\x09\x94\x84\xd4\x58\x9a\x3f\x82\x1a\x23\x43\xb8\x08\x5f\xa1\xfa\x16\xbb\x16\x62\x2e\x5b\xf8\xa2\x5d\x39\xd8\x84\x07\x85\xc2\x51\x3b\x55\x4e\xe9\xe3\x2b\x73\xb6\x0e\x8a\x9a\xe0\xef\x93\x9a\x22\xe9\x38\xdb\x7a\xb6\xd0\x22\xaa\xdc\x57\x75\xf8\xa1\x04\xf3\x45\x90\x95\x79\xbd\x1c\x40\x81\x6c\x67\x9c\xa1\x92\x79\x98\x2b\xe0\xb9\x7c\x63\xab\x73\x2b\x8b\xc4\xf5\x8a\x29\x57\xec\x0d\x2e\x58\xa9\x3d\xc9\x14\x26\x10\x4f\x68\x83\xb3\x7c\x27\x6d\xf3\x9a\x2e\x39\x65\xdf\x68\x63\x7b\x6a\x98\x89\x58\xa0\xb0\x6b\xd8\x75\xa1\x0b\x23\xfc\x3a\x37\x73\xe1\x6f\x26\x0f\xa1\x95\xce\x43\x3e\xa1\x8a\xe6\x95\x18\xca\x52\x9d\x98\x5b\x8c\x58\xd3\x62\x36\x9f\xcb\x86\x68\x1a\xfa\xb7\xa5\x7e\xa7\x8c\xc8\x42\x4a\x52\x3d\x5a\xe8\x5b\x32\xa1\x0a\xd6\x77\xb2\x59\x84\x0e\xf7\x53\x42\xd3\xa1\xa8\x9b\xb1\x4f\xb4\x75\x11\x31\x09\x58\x42\xff\x97\xdc\x79\x8a\x69\x6c\xe0\x34\xc4\x10\xea\x72\x32\xf1\xb4\x0a\xf6\x18\x78\x80\x1d\x4f\xe3\x2f\x18\xe6\xa5\xbd\xc5\x45\x13\xcd\x5d\x05\xd3\x56\x1e\xd6\x07\x02\x70\x32\xf8\x2a\x5c\x41\x42\xe2\x3d\x4a\x95\x8d\x85\x46\x12\x6b\x5d\xb0\xdc\x0b\x0c\x7e\x1e\xed\x5d\x58\x19\x05\x31\xc5\xae\xc8\xb4\x17\xb4\xa9\xe6\xb4\x69\xb9\x59\x9c\x5e\x68\x45\xca\xe9\x5c\x4e\x25\x96\x47\x47\x17\xd3\xbc\x59\x81\xb3\x6d\xd5\xa2\x0a\x67\xd6\x5d\x9b\x3e\x50\x69\x8a\xa3\xc5\x58\x26\x77\x2a\x27\x9d\xc0\xc2\x21\x7f\xe1\x66\x27\x6e\x02\x42\xaf\x3a\xb3\x40\xb7\x86\x4f\x5a\xa1\x73\xec\x34\x7c\x1e\x94\xac\x25\xb5\xbf\x2c\xb1\x58\x90\xe4\xf9\xc6\x74\xca\x22\x8b\x61\x56\x31\xc6\x7a\x71\x74\x35\x33\x7d\x3a\xf1\x74\x90\x13\xa8\xde\xbe\x9c\x3e\xff\x5f\x5a\xb3\x48\xb3\x58\xcd\x22\x60\x82\x88\x40\x5d\x9b\xb4\x7d\x0c\xef\x6f\x8d\xa7\x97\xf2\xf6\x86\xeb\xcb\xde\x84\xa6\x8c\xd2\xf6\xc0\xed\x1d\x95\x11\x56\xcd\x8d\x03\x5a\x87\x0d\x86\x45\x10\xa5\x41\xe1\x92\x78\x50\x60\x17\x61\x40\xea\x71\x6e\x89\x0e\x16\x43\xe0\x4f\x31\x43\xb8\x23\xc3\x67\xac\x0b\x88\x67\xe0\xcd\x06\xb1\x78\x10\x36\xec\x95\x4e\x7b\x8f\xb8\x0b\xf8\x97\x35\xec\x12\x01\x71\x04\x8b\x05\x8f\x6e\x0c\x23\xa7\x0f\x94\xbb\xd8\x08\x91\xe1\xe3\x42\x2d\xd0\x97\xb4\xc6\x10\x3d\xba\x82\xd1\x38\x6a\x08\xed\x93\xac\x11\xe2\x8f\xc6\x42\x8c\xe1\xf0\x70\x0a\xda\xa4\x71\x35\x4f\x9d\x62\x9b\x6a\xf1\xd7\x51\xc6\xed\x11\x15\x74\x67\x34\x97\x74\x76\xe9\xe8\xbc\xe9\x85\x9d\x58\x1b\xa9\xa1\x41\x57\x5b\xb9\x8f\xae\xc8\x4d\x87\x3c\xc8\xf3\xf9\x6c\xca\xa6\xe4\xb7\x58\x0d\x2e\x94\x80\x60\xa9\x7f\x5d\xc3\xad\x74\xdc\x3a\xa1\xa5\xa7\x3e\x0b\x4b\x76\x99\x72\x12\x64\x55\xf7\x53\x68\x60\xb9\xf3\xa6\x16\x6b\x86\x01\xf6\x22\x37\x2f\xf3\x14\xac\x9a\x1d\x16\x73\xdf\xcd\xaa\x5e\x91\xae\x28\xea\xee\xb4\x45\x2d\x9f\x96\xde\x2d\x9d\x7b\x0d\x86\x37\x7e\xab\x9b\x47\xd8\x3c\xae\xe0\xc7\x9b\xc7\xcd\x63\x32\xee\xe7\xcd\xee\xa7\xfb\x4f\x3b\xf8\x7c\xf3\xf0\x70\xb3\xdd\x6d\xee\x1e\xe1\xfe\xa1\x5c\xcb\xdf\xbf\x87\x9b\xed\x2f\xf0\x1f\x9b\xed\x6d\x05\x28\xc3\x06\xf8\x79\xb0\x74\xc9\x7c\x13\xc9\xb8\xd2\x14\x63\xd2\x39\x83\x78\x4e\x2a\x12\x4e\x4d\x70\x0c\xa6\xe2\x86\xc8\x9e\x43\xac\x69\x61\xb7\xd9\x7d\xb8\xab\x60\x7b\xbf\x7d\xbd\xd9\xbe\x7f\xd8\x6c\xff\x76\xf7\xf3\xdd\x76\x57\xc1\xcf\x77\x0f\xef\x7e\xba\xd9\xee\x6e\x7e\xdc\x7c\xd8\xec\x7e\xe1\x10\x7a\xbf\xd9\x6d\xef\x1e\xc3\xe7\x03\x37\x51\xc6\xc7\x9b\x87\xdd\xe6\xdd\xa7\x0f\x37\x0f\xf0\xf1\xd3\xc3\xc7\xfb\xc7\xbb\x50\x6d\xc3\xb6\x50\xa1\xa2\x5e\xcd\x0d\x46\x3b\xc9\x5b\x07\xde\xcc\x84\xae\x70\x19\x2e\x62\x18\xac\x19\xac\x24\x7a\xce\x17\x6e\x61\xe4\x59\x29\xc7\xdf\x8c\xb8\xc5\xbc\x34\x4c\x1b\x9d\x1b\x7b\xee\x55\x12\x5c\x4b\xc7\xc8\xee\x4c\x2d\x73\x9b\x1c\x40\x3d\xee\x59\x79\x1a\x5b\x2e\x5a\xcf\x9b\xd9\x10\x7b\xff\xb6\x86\x0f\xd9\xa4\xf4\xd2\x07\x29\xf6\x52\xf1\xf2\x7c\x43\x95\x17\xf0\x89\x62\x97\xf4\x08\x32\xb4\x01\xc5\xc3\x4e\xdf\xa1\xb1\x53\x31\x6a\x49\x9b\x2c\x6f\xac\x2f\x47\x06\x1a\x0f\x4a\x1e\x50\xd7\x78\x5d\xe5\x6d\x77\xb5\x18\xe5\xe6\xc9\xcf\x1f\xc6\xfb\x55\x20\x0a\x0e\x1a\x54\x72\xcf\x84\x8e\x95\x3b\x58\xe3\x5c\xde\x5b\xa4\x23\x3d\x88\xda\x3b\xde\x8e\x5f\xce\x8f\x80\x9e\x8b\xf2\x61\x2c\xec\x93\xcb\x94\xe4\x83\xe3\x44\x80\x5d\x2b\x7a\x71\x58\xce\xf0\xe9\xed\xf4\x49\xc0\xfc\x71\x80\x1b\xb0\x96\xf3\x90\x4d\xea\x5a\x36\x44\x6c\xc3\x2a\x81\x08\x4c\x98\xe9\x4a\xa1\x92\xd0\x84\xd0\x75\x27\xc8\x44\x68\x41\xd8\xb0\x33\xa7\x2a\x9e\x6b\xb5\x1b\x95\x3f\x6d\x74\xd9\x9a\x63\xc6\x98\x31\xfc\x46\xea\xe8\xcc\x02\x57\xcb\x89\xc1\xd5\x57\x77\xe2\x49\x2b\xba\xb6\x32\x21\x60\x0f\xc6\x34\x47\xa9\xca\xd9\xe1\x17\x70\xde\x0c\x83\x38\x60\xc5\x9c\x60\x24\xc5\x5b\x21\xd5\x68\x43\x35\x12\xaa\x1d\xf5\x4c\x6e\xb8\x08\x5e\xf8\x12\xa4\x36\x7d\x4f\xc1\x5b\xda\x23\x1c\x8c\xee\xba\xe2\x38\x24\x82\x7e\x3a\x88\x8b\x32\xf2\x30\x5d\x34\x4f\x92\x97\xa4\x6d\xfc\x7c\xc3\x39\x19\x8d\x90\x3e\x6e\x88\xe2\x43\x06\xfc\x75\x0d\x37\x35\xd5\x04\xb2\x42\x42\x5e\x3a\xf9\x66\x2e\xd4\x45\x52\x7c\xee\x88\xba\x2f\xd3\xf5\x74\x59\xf8\xd5\x75\x5b\x62\xa1\x75\x67\x4c\x98\x82\xf2\xa4\x73\xb1\x6c\xe7\x99\x2b\x08\x68\x91\xf1\xa4\x02\xc1\x1a\x0a\x5d\x63\xb8\xc4\x10\xc6\xa0\x11\xfd\x26\x8e\x3b\xec\xb5\xf4\x39\x1f\xf3\xf6\x56\x25\xdd\xc1\xec\x55\x9c\x42\x31\x6f\x79\x43\xb0\x43\xcc\x37\xac\x5a\xa4\xe3\x22\x15\xfb\x2b\xe9\x16\xeb\x1e\x5c\xc3\x4f\xe6\x48\x9d\x50\x68\x25\xb3\xc1\xd8\x9e\x85\xe0\xf9\x7e\xfc\x45\x8b\x56\xc5\x36\x24\x73\xee\xb8\x16\xe1\x21\x6e\xfc\x35\x01\xe9\x0c\xa3\xac\x2f\x33\x9d\x79\x8b\x32\x23\xfa\x3c\x29\x2a\xc2\x20\xce\x84\xa9\x67\x92\x6d\xc0\x67\x4a\xf8\x90\xef\x6c\x9b\x36\xdb\xa6\xc1\x16\x75\x13\xde\xe8\x8c\x6a\x2e\x8c\xce\x85\xed\x19\x89\x12\xb9\xce\x56\x9c\xd3\x79\xb4\x76\xde\x96\xc5\xc9\xb1\x70\x0e\x2d\xa5\x4f\x1c\xa2\x56\xe7\x73\xe3\xfd\x14\xc9\xc6\x7c\xa1\x89\x2c\x30\xdb\x34\x93\xf9\x63\x11\x8d\x05\x6d\xcc\xba\x84\x00\xbe\xdb\xde\x52\x5d\xbd\xf4\x19\x1c\xff\xfd\xe6\xe3\xc7\xbb\xed\xed\xe6\xbf\xbe\x27\x17\xf2\xb4\x60\x18\xd4\x14\x3f\x5f\x28\x3f\xdd\xa3\xbf\xb1\x2a\xc7\xbc\x4b\x02\x80\xdd\x37\xbe\x50\xc5\xcf\x28\x96\xd3\x84\x44\xab\x8d\x54\x68\x07\x45\x68\x1d\xba\xb9\x6a\xee\xe4\x5b\x89\xaa\x71\x80\xba\x56\xc6\x05\xd0\xdf\x5b\x51\x7f\x41\xef\x60\xf5\xdb\xef\xab\xb9\x49\x51\xa2\x4e\xd5\x6e\x4a\xc1\xc4\xa8\x1a\xbb\xbe\xa2\x93\x5e\xc3\xd5\xad\xd1\xff\x94\xbf\x17\x28\x72\x34\x09\xff\x87\x6b\xe0\x6e\x9d\xdb\x54\xd7\x99\x51\x35\x44\xf1\xb3\x1e\xb1\x3b\x28\xca\x76\xb1\x9b\xa5\x5c\x71\x93\xf6\xe2\x39\x2f\x42\xb9\xa9\x0f\x0a\xac\xe1\x33\x82\x50\xce\x80\xc5\xf0\x74\x9c\x93\x26\x14\xe7\x67\x43\xdc\x38\xc7\x8c\x35\xb4\x5d\x4c\x33\x87\x54\x8c\xd3\x6a\x75\x8f\xf3\x27\x2b\xbc\x21\x4d\x9a\x38\x7a\x71\x35\x58\xc9\x83\x6b\xc2\xe0\x15\xd5\x8a\xe5\xe6\x33\x7e\xfc\x42\x6a\xa2\x70\x32\xef\xe3\xa3\xe5\xd2\xde\x35\x8f\x67\xe6\x21\x87\xb0\x75\x27\x9f\x12\x52\xce\xcb\xc4\xdf\xa6\x69\x9a\x7e\x87\xdf\x58\x6f\xd3\x9e\x6e\x59\x7f\xe7\xc7\x63\x90\x34\x45\xcf\xb4\x0c\x9f\xaa\xfc\x20\x14\xae\xe8\x81\xfc\xcd\xe5\xf5\x0f\x24\x22\xf5\x23\x04\x04\xa1\x7c\xc5\xf1\x79\xa2\xf1\x52\xc7\x36\x94\xa1\x31\x47\x54\xa6\x38\x45\xd7\x6f\xf6\x3c\x2d\x13\x8b\x91\x5d\x0a\x64\xe1\x53\xb8\xff\xd1\x27\xa7\x1f\x36\xef\xee\xb6\x8f\x77\xaf\xbf\x5b\xbf\xe5\x57\xbe\x85\xa1\xbf\xc4\x3d\xe2\x37\x67\xaf\xca\x29\xe5\xc2\x5e\x49\x3d\xe9\x16\x0f\xbc\xc4\xc0\xff\x9f\xf4\x3b\x11\x6f\x36\xdb\x23\xe2\x42\x85\x14\xe4\x4c\x6b\x5a\x59\x83\x12\xfa\x30\x8a\x03\xc2\xc1\x3c\xa1\xd5\xa7\x5f\xf6\xc5\x69\xc9\xcc\xd7\xdd\xf9\xbd\xd6\xaf\xfe\x37\x00\x00\xff\xff\xee\x3b\xec\x55\x5d\x2c\x00\x00")

func templates_license_apacheBytes() ([]byte, error) {
	return bindataRead(
		_templates_license_apache,
		"templates/_LICENSE_APACHE",
	)
}

func templates_license_apache() (*asset, error) {
	bytes, err := templates_license_apacheBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_LICENSE_APACHE", size: 11357, mode: os.FileMode(420), modTime: time.Unix(1497566433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_license_mit = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\xcd\x6e\xe3\x36\x10\xbe\xf3\x29\x3e\xe4\xb4\x0b\x08\xe9\xcf\xa5\x40\x6f\x8c\x44\x5b\x44\x65\xd2\xa0\xe8\x75\x7d\x94\x25\x3a\x62\x21\x93\x82\x48\x37\xc8\xdb\x17\x23\x3b\xbb\xcd\x9e\x04\x71\xe6\xfb\x9d\x9d\xb4\x68\x7c\xef\x42\x72\x8c\x95\x71\x7e\x5f\xfc\xeb\x98\xf1\xa5\xff\x8a\xdf\x7f\xfd\xed\x0f\xc6\xf6\x6e\xb9\xfa\x94\x7c\x0c\xf0\x09\xa3\x5b\xdc\xf9\x1d\xaf\x4b\x17\xb2\x1b\x0a\x5c\x16\xe7\x10\x2f\xe8\xc7\x6e\x79\x75\x05\x72\x44\x17\xde\x31\xbb\x25\xc5\x80\x78\xce\x9d\x0f\x3e\xbc\xa2\x43\x1f\xe7\x77\x16\x2f\xc8\xa3\x4f\x48\xf1\x92\xdf\xba\xc5\xa1\x0b\x03\xba\x94\x62\xef\xbb\xec\x06\x0c\xb1\xbf\x5d\x5d\xc8\x5d\x26\xbd\x8b\x9f\x5c\xc2\x97\x3c\x3a\x3c\xb5\x0f\xc4\xd3\xd7\x55\x64\x70\xdd\xc4\x7c\x00\xcd\x3e\x46\x78\xf3\x79\x8c\xb7\x8c\xc5\xa5\xbc\xf8\x9e\x38\x0a\xf8\xd0\x4f\xb7\x81\x3c\x7c\x8c\x27\x7f\xf5\x0f\x05\x82\xaf\x81\x13\xcb\x11\xb7\xe4\x8a\xd5\x67\x81\x6b\x1c\xfc\x85\xbe\x6e\x8d\x35\xdf\xce\x93\x4f\x63\x81\xc1\x13\xf5\xf9\x96\x5d\x81\x44\x8f\x6b\x73\x05\xe5\xf8\x25\x2e\x48\x6e\x9a\x58\x1f\x67\xef\x12\xd6\xac\x3f\xdc\xad\x3b\x64\x7d\xa6\x42\xf3\xa3\xa2\x44\x2f\x6f\x63\xbc\x7e\x4e\xe2\x13\xbb\xdc\x96\xe0\xd3\xe8\x56\xcc\x10\x91\xe2\xaa\xf8\x8f\xeb\x33\xbd\xd0\xfa\x25\x4e\x53\x7c\xa3\x68\x7d\x0c\x83\xa7\x44\xe9\x4f\xc6\xec\xe8\xd0\x9d\xe3\xbf\x6e\xcd\x72\xbf\x67\x88\xd9\xf7\xf7\xba\xd7\x03\xcc\x3f\xae\xfa\x18\xa5\xb1\x9b\x26\x9c\xdd\xa3\x30\x37\xc0\x07\x74\xff\x8b\xb3\x90\x7c\xca\x5d\xc8\xbe\x9b\x30\xc7\x65\xd5\xfb\x39\xe6\x33\x63\xb6\x16\x68\xf5\xc6\x1e\xb9\x11\x90\x2d\xf6\x46\x7f\x93\x95\xa8\xf0\xc4\x5b\xc8\xf6\xa9\xc0\x51\xda\x5a\x1f\x2c\x8e\xdc\x18\xae\xec\x09\x7a\x03\xae\x4e\xf8\x4b\xaa\xaa\x80\xf8\x7b\x6f\x44\xdb\x42\x1b\x26\x77\xfb\x46\x8a\xaa\x80\x54\x65\x73\xa8\xa4\xda\xe2\xe5\x60\xa1\xb4\x45\x23\x77\xd2\x8a\x0a\x56\x83\x04\x1f\x54\x52\xb4\x44\xb6\x13\xa6\xac\xb9\xb2\xfc\x45\x36\xd2\x9e\x0a\xb6\x91\x56\x11\xe7\x46\x1b\x70\xec\xb9\xb1\xb2\x3c\x34\xdc\x60\x7f\x30\x7b\xdd\x0a\x70\x55\x41\x69\x25\xd5\xc6\x48\xb5\x15\x3b\xa1\xec\x33\xa4\x82\xd2\x10\xdf\x84\xb2\x68\x6b\xde\x34\x24\xc5\xf8\xc1\xd6\xda\x90\x3f\x94\x7a\x7f\x32\x72\x5b\x5b\xd4\xba\xa9\x84\x69\xf1\x22\xd0\x48\xfe\xd2\x88\xbb\x94\x3a\xa1\x6c\xb8\xdc\x15\xa8\xf8\x8e\x6f\xc5\x8a\xd2\xb6\x16\x86\xd1\xda\xdd\x1d\x8e\xb5\xa0\x27\xd2\xe3\x0a\xbc\xb4\x52\x2b\x8a\x51\x6a\x65\x0d\x2f\x6d\x01\xab\x8d\xfd\x0e\x3d\xca\x56\x14\xe0\x46\xb6\x54\xc8\xc6\xe8\x5d\xc1\xa8\x4e\xbd\xa1\x15\xa9\x08\xa7\xc4\x9d\x85\xaa\xc6\xa7\x8b\x68\xb3\xfe\x1f\x5a\xf1\x9d\x10\x95\xe0\x8d\x54\xdb\x96\xc0\x14\xf1\x63\xf9\x99\xfd\x17\x00\x00\xff\xff\xc9\xaa\xd9\x81\x20\x04\x00\x00")

func templates_license_mitBytes() ([]byte, error) {
	return bindataRead(
		_templates_license_mit,
		"templates/_LICENSE_MIT",
	)
}

func templates_license_mit() (*asset, error) {
	bytes, err := templates_license_mitBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_LICENSE_MIT", size: 1056, mode: os.FileMode(420), modTime: time.Unix(1497566433, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x51\x6f\xd3\x30\x18\x7c\xae\x7f\xc5\xc9\x49\xd7\x76\x90\x74\x5b\x25\x1e\x0a\x1d\x4b\xa7\x6c\x44\xdb\x3a\xd4\x0d\x24\xd8\x60\xf2\x3a\x77\x35\x38\x76\xe4\x38\x85\xb2\xee\xbf\x23\x27\x69\x69\xe1\x85\x97\x48\xb9\xef\xce\x77\x67\x7f\x1e\x3e\x46\xe3\x24\x1a\x9e\xc7\x57\xe4\x7d\x74\x7c\x16\x9d\xc6\x03\x3a\xe3\x52\x6a\x4a\x86\xc9\x28\x1a\x7f\xba\x1b\x45\x17\xf1\x80\xbe\x69\x0e\xd2\x05\xcb\xb2\x11\x4b\x79\xf3\x90\x12\xf2\xc0\xa7\xac\x90\xb6\x8f\x19\x97\x19\x21\x1e\x8e\x25\x67\x0a\xa1\xc6\x54\x48\x9e\x83\xa9\x07\xdc\x0b\xc5\xcc\x82\x4c\xdc\xa4\x0f\xcf\xc3\x98\xa7\x7a\xce\x6b\xbc\x22\x92\xc6\x11\x9f\xcc\x34\x68\x10\x1c\xa2\x64\x0a\xf5\x18\x86\x21\x25\x8d\xa3\x47\x5d\x21\x58\x2e\xd1\xae\x58\x1f\x14\xbb\x97\x1c\x76\x35\xc9\x8c\xfe\xc6\x27\x96\x62\x67\x07\xfc\xa7\xb0\xd8\xef\x90\xc6\x91\x49\x11\x98\x29\xfc\xf6\xe9\xe5\x30\x19\x75\xba\x7e\x7b\xa3\x4c\x07\x07\x87\xe8\x3e\xf0\x79\x57\x15\x52\xae\xfd\xab\xfc\x97\x67\xb4\x2c\xa3\xd3\x4c\x48\x8e\x5c\x17\x66\xb2\x6a\x53\x08\xb9\xee\x24\x54\x6e\x99\x94\xfd\x3a\x86\xf7\x1f\x92\xcd\xa2\xb5\x7c\xab\x6a\x8d\x6d\x94\xad\x8e\x64\x56\x68\x05\x6e\x8c\x36\x7f\xd5\xac\x58\x49\xad\xab\xa3\x8f\x0b\x85\x85\x2e\x0c\x58\x96\x49\x31\x29\xd5\xc4\x14\x6a\x15\x75\x65\xe3\x79\x18\x96\xf1\x36\x78\x65\x68\x53\x28\x08\xbb\x15\xd7\x14\xca\x3d\xcb\x26\xf5\x4f\x6e\xc7\x4f\x99\x50\xe1\xa3\x76\xfe\xd7\x3c\xb7\xff\x06\xb0\x3c\xb7\xd5\x0a\x14\x0a\xce\xde\x01\x39\xf4\x74\x4d\xdd\x32\x74\xd3\xad\xcb\x71\x00\x82\x39\xc2\x6e\x18\x86\xa4\x41\x3c\xbc\x73\x7b\xe7\x96\xaf\xef\x18\x86\x67\x08\x62\xb4\xbe\xde\xb0\xe0\x57\x14\x7c\xbe\x0b\xbe\xbc\xe8\x87\xbb\x6f\x3d\x0f\xe1\xae\xef\xb7\xe0\xb7\x2f\xa2\xb3\xf8\x24\x39\x8f\xef\xce\x93\xab\xeb\x0e\x96\xc8\xb5\xb1\x58\x82\xfd\xf8\x8e\xd6\x30\x3e\x4d\x46\x78\x3a\xb9\xc2\x00\xb4\x16\xd2\xe7\xd7\x78\xca\x8c\x50\x76\x0a\x7a\xbb\xd7\xeb\xdd\xf4\x5e\xa5\xcd\xa0\xb7\x97\x97\x3f\x7b\x29\x9a\xf9\xad\xa2\x2f\xe1\xfb\xfb\xee\x73\xf0\xdc\x02\xf9\x1d\x00\x00\xff\xff\x84\xcc\xc0\x33\x52\x03\x00\x00")

func templates_makefileBytes() ([]byte, error) {
	return bindataRead(
		_templates_makefile,
		"templates/_Makefile",
	)
}

func templates_makefile() (*asset, error) {
	bytes, err := templates_makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_Makefile", size: 850, mode: os.FileMode(420), modTime: time.Unix(1497563571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x4d\x4e\xc3\x30\x10\x46\xf7\x3e\xc5\x48\x61\x01\x1b\x24\xfe\x2e\x50\x16\xa8\x0b\x40\xe2\x02\xd8\x75\x26\xea\x50\x7b\x5c\x8d\xc7\xa0\xaa\xea\xdd\x51\x27\x69\xaa\xac\xa2\xf7\x94\xf7\x8d\x3b\x38\xee\xa5\xfc\x60\xd4\x6f\x0e\x19\x4f\xce\x75\x1d\x1c\x95\x34\x21\x3c\x18\xcd\xf8\x38\xe2\xcc\x4f\x13\xcf\xe2\xf9\x22\x66\xf3\x72\x72\xce\x7b\xef\x86\xc6\x11\x72\x20\x86\xdb\x3b\x13\x6e\xcd\x89\x18\xc1\xc7\xd2\xa3\xb7\xa3\xef\x61\x87\xce\x7d\x35\x86\xc6\xa4\xa0\x58\xb5\xc2\x1f\xe9\xd6\x82\x1c\x76\x68\x6e\xcc\x57\x8d\x52\x0f\x87\xd2\x04\xa6\xe7\x43\xe0\x1e\xec\x2f\x52\x90\xc6\xe7\xcf\xb2\x96\xc6\x63\xfc\x5a\xf2\x9e\x12\x42\x2d\x4d\x22\x56\x2b\x37\x36\xb8\x21\x0e\x72\xb8\x26\xc4\x55\x43\x4a\x53\x96\x30\x30\xe8\x16\x17\x27\x05\x73\xf9\x45\xd3\x63\x0d\x83\x94\x6c\x7c\xf3\xf6\xb9\x5a\x7f\xc0\x50\x52\x8f\x72\x7f\x5d\x8d\xe7\x21\xc3\xff\x00\x00\x00\xff\xff\x90\x4a\xaf\x73\x7e\x01\x00\x00")

func templates_readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templates_readmeMd,
		"templates/_README.md",
	)
}

func templates_readmeMd() (*asset, error) {
	bytes, err := templates_readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_README.md", size: 382, mode: os.FileMode(420), modTime: time.Unix(1497566561, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x51\xc1\x8e\xd3\x30\x10\xbd\xcf\x57\x8c\xd4\x0b\x44\x5d\x47\x80\x58\xd0\xde\x80\x2e\x08\x89\x55\x11\x45\x5c\x10\xea\x3a\xce\xc4\x99\x95\xe3\x09\xf6\xb8\xdb\x5e\xf8\x76\xe4\xb4\xbb\xa7\xe4\xcd\xbc\x79\xf3\xfc\x66\x85\x77\xd6\xe1\x76\x87\x03\x07\xca\x60\x36\xbb\xfd\x4e\x25\x11\x34\xff\x00\x56\xf8\x49\xa6\x99\x03\xf5\xb8\xed\x1e\xc8\xe9\x99\xb5\xc6\x9d\x5a\x65\x87\x36\xf6\xb8\x39\x45\x3b\xb1\xc3\xc0\x5d\xc6\x17\xbb\xd1\xa6\x67\x76\x7e\x09\x8d\x11\x68\x8c\x85\xc6\x64\xa9\x7a\x9f\x25\xf4\x94\x32\xec\xa5\x7b\x80\xbd\x52\xd6\x5a\xfd\x90\xdc\xc8\x4a\x4e\x4b\x22\xcc\x33\x39\x1e\xd8\x21\x1d\x95\x62\x66\x89\xb9\x9d\x13\x0d\x7c\xa4\x0c\x8d\xf9\xfd\xf6\xfa\xfd\xe1\xef\x1f\xb8\x7c\x8d\x14\x05\x68\x8c\xf3\xf2\xca\x78\x39\xff\xbd\x36\x0e\xf6\xce\xcb\xbe\xa7\xa1\xc4\x27\xe0\x45\x4f\x33\xe5\xca\x5a\x30\x1d\x67\x49\x6a\x1a\x38\x1b\x99\x2c\xc7\xda\x83\xc6\xd0\x91\xa0\x31\x8b\xbb\xc6\xcc\x49\x86\x6a\xf2\x23\x47\x9b\x98\x32\x0e\x92\x70\x4e\xe2\x93\x9d\xf2\x12\xc1\x1c\x8a\xe7\x58\xcd\xf5\x21\x9c\x9f\xda\x98\xfe\x14\xb8\xab\x73\x3f\x29\x2b\x76\x75\xf8\xb4\xc6\xae\x70\xe8\xf1\x91\x75\xc4\x7b\x2f\x58\x57\xe0\x95\xbb\x7f\xda\x06\x2b\xdc\x16\x9d\x8b\xa2\x0c\xa8\x23\xa1\x17\x74\x72\xa0\x64\x3d\xa1\x8a\x84\xf5\x73\x3c\x36\x84\x13\x3e\x8e\x14\xb1\x64\xba\x48\x7e\x63\xa5\xaf\x9b\xdb\x9a\x7a\x59\xc4\xbe\x27\xa9\x87\xb8\x0a\xe2\x6c\x40\x1f\xb8\x27\x74\xd6\x8d\xb4\xc6\x1f\xb7\x37\x38\xaa\xce\xf9\xa6\x6d\x3d\xeb\x58\x3a\xe3\x64\x6a\xef\x6c\x56\x4a\x13\xc7\x3e\xb7\x0b\xbf\xe5\x9c\x0b\xe5\xf6\xdd\x9b\x6b\x30\xe7\x0a\xac\xf0\x8b\xe0\x2f\x8a\xbd\x24\x1c\x96\x8b\xb6\x60\x0e\x0b\x6e\x61\xe9\xfa\x50\x83\x31\xdc\x93\xbd\x30\x60\x01\x2d\xfc\x0f\x00\x00\xff\xff\x22\x12\x13\x23\x71\x02\x00\x00")

func templates_gitignoreBytes() ([]byte, error) {
	return bindataRead(
		_templates_gitignore,
		"templates/_gitignore",
	)
}

func templates_gitignore() (*asset, error) {
	bytes, err := templates_gitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_gitignore", size: 625, mode: os.FileMode(420), modTime: time.Unix(1497544670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xca\xcc\x2d\xc8\x2f\x2a\xd1\xe0\x52\x4a\xcb\x2d\x51\xe2\x52\xb2\x51\xb5\xcd\xad\x2c\x4a\x2d\xc8\x0f\x2d\xca\x51\xb5\xd3\x07\x73\x13\x0b\x0a\xfc\x12\x73\x53\x55\xed\xf4\x33\x52\x73\x72\xf2\x95\xb8\x34\x15\xb8\xb8\xd2\x4a\xf3\x92\xc1\x46\x68\x68\x2a\x54\x73\x71\xa6\xe5\x96\xe8\x05\x14\x65\xe6\x95\xe4\xe4\x69\x80\x55\xe9\x39\x95\x66\xe6\xa4\x78\x80\x98\x1a\x9a\x9a\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\xf4\x8a\xc1\x48\x77\x00\x00\x00")

func templates_mainGoBytes() ([]byte, error) {
	return bindataRead(
		_templates_mainGo,
		"templates/_main.go",
	)
}

func templates_mainGo() (*asset, error) {
	bytes, err := templates_mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/_main.go", size: 119, mode: os.FileMode(420), modTime: time.Unix(1497566436, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHello_helloGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x48\xcd\xc9\xc9\xe7\xe2\x4a\x2b\xcd\x4b\x56\x70\x2a\xcd\xcc\x49\xf1\x00\x09\x68\x68\x2a\x14\x97\x14\x65\xe6\xa5\x2b\x54\x73\x29\x80\x40\x51\x6a\x49\x69\x51\x9e\x82\x12\x58\x56\x47\xa1\x3c\xbf\x28\x27\x45\x4f\x89\xab\x16\x45\x67\x26\x6e\x6d\x99\x48\x7a\x00\x01\x00\x00\xff\xff\x0e\x32\x1d\xc6\x7b\x00\x00\x00")

func templatesHello_helloGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesHello_helloGo,
		"templates/hello/_hello.go",
	)
}

func templatesHello_helloGo() (*asset, error) {
	bytes, err := templatesHello_helloGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/hello/_hello.go", size: 123, mode: os.FileMode(420), modTime: time.Unix(1497542487, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHello_hello_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x41\x6a\xc3\x30\x10\x45\xd7\x9a\x53\xfc\x0a\x4a\xec\x62\x7c\x80\x84\x6c\x0a\x85\xee\x9b\x0b\x08\x69\x9c\x88\xaa\x91\x91\x46\xa4\x21\xe4\xee\x45\xaa\xf0\xea\xc3\xcc\xe3\xfd\xbf\x1a\xfb\x6d\xce\x8c\x0b\x87\x10\x89\xfc\xcf\x1a\x93\x60\x20\xa5\x85\xb3\xf8\xeb\x59\x1f\x68\x24\x5a\xca\xd5\xe2\xc4\x59\xbe\xcc\xfd\xb3\xa2\x83\xe0\xad\x13\xf3\x69\xc4\x83\x94\xb1\x52\x4c\xc0\xfe\x88\xf7\xe2\x83\xfb\xa7\x46\x52\xfc\xbb\xb2\x15\x76\xf5\xa3\xdb\x75\xc2\x2d\xa6\xe0\x66\x4d\x00\xe0\x17\x6c\xc8\xcb\x11\x5d\xf3\x20\xa5\x64\xfe\x48\x29\xa6\x65\xd0\x2d\x11\xad\x2d\x89\x1d\x6e\x17\x1f\x18\xbd\x1d\xd9\xdc\xdb\xf8\x3d\x76\xaf\x79\x57\x15\x35\xf5\xb4\x59\xa7\xee\x1c\x0f\xad\xef\x49\x4f\xfa\x0b\x00\x00\xff\xff\x9d\x08\x11\x20\xf6\x00\x00\x00")

func templatesHello_hello_testGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesHello_hello_testGo,
		"templates/hello/_hello_test.go",
	)
}

func templatesHello_hello_testGo() (*asset, error) {
	bytes, err := templatesHello_hello_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/hello/_hello_test.go", size: 246, mode: os.FileMode(420), modTime: time.Unix(1497542487, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/_LICENSE_APACHE":      templates_license_apache,
	"templates/_LICENSE_MIT":         templates_license_mit,
	"templates/_Makefile":            templates_makefile,
	"templates/_README.md":           templates_readmeMd,
	"templates/_gitignore":           templates_gitignore,
	"templates/_main.go":             templates_mainGo,
	"templates/hello/_hello.go":      templatesHello_helloGo,
	"templates/hello/_hello_test.go": templatesHello_hello_testGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"_LICENSE_APACHE": &bintree{templates_license_apache, map[string]*bintree{}},
		"_LICENSE_MIT":    &bintree{templates_license_mit, map[string]*bintree{}},
		"_Makefile":       &bintree{templates_makefile, map[string]*bintree{}},
		"_README.md":      &bintree{templates_readmeMd, map[string]*bintree{}},
		"_gitignore":      &bintree{templates_gitignore, map[string]*bintree{}},
		"_main.go":        &bintree{templates_mainGo, map[string]*bintree{}},
		"hello": &bintree{nil, map[string]*bintree{
			"_hello.go":      &bintree{templatesHello_helloGo, map[string]*bintree{}},
			"_hello_test.go": &bintree{templatesHello_hello_testGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
